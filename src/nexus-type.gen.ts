/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  EventType: "Conference" | "Webinar" | "Workshop"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Event: { // root type
    audience: string[]; // [String!]!
    description: string; // String!
    id: string; // String!
    location: string; // String!
    name: string; // String!
    topics: string[]; // [String!]!
    type: NexusGenEnums['EventType']; // EventType!
  }
  Query: {};
  Session: { // root type
    description: string; // String!
    end: string; // String!
    id: string; // String!
    start: string; // String!
    title: string; // String!
  }
  Speaker: { // root type
    company: string; // String!
    email: string; // String!
    id: string; // String!
    linkedIn?: string | null; // String
    name: string; // String!
    title: string; // String!
    twitter?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Event: { // field return type
    audience: string[]; // [String!]!
    description: string; // String!
    id: string; // String!
    location: string; // String!
    name: string; // String!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    topics: string[]; // [String!]!
    type: NexusGenEnums['EventType']; // EventType!
  }
  Query: { // field return type
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
  }
  Session: { // field return type
    description: string; // String!
    end: string; // String!
    id: string; // String!
    speakers: NexusGenRootTypes['Speaker'][]; // [Speaker!]!
    start: string; // String!
    title: string; // String!
  }
  Speaker: { // field return type
    company: string; // String!
    email: string; // String!
    id: string; // String!
    linkedIn: string | null; // String
    name: string; // String!
    title: string; // String!
    twitter: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Event: { // field return type name
    audience: 'String'
    description: 'String'
    id: 'String'
    location: 'String'
    name: 'String'
    sessions: 'Session'
    topics: 'String'
    type: 'EventType'
  }
  Query: { // field return type name
    events: 'Event'
  }
  Session: { // field return type name
    description: 'String'
    end: 'String'
    id: 'String'
    speakers: 'Speaker'
    start: 'String'
    title: 'String'
  }
  Speaker: { // field return type name
    company: 'String'
    email: 'String'
    id: 'String'
    linkedIn: 'String'
    name: 'String'
    title: 'String'
    twitter: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}